apply plugin: 'com.android.application'

def cfg = rootProject.ext.android
def librarys = rootProject.ext.dependencies
def url = rootProject.ext.url

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystore.properties")
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    dexOptions {
        jumboMode = true
    }

    defaultConfig {
        ndk { abiFilters "armeabi", "armeabi-v7a", "x86", "mips" }
        applicationId "com.okay.myapp"
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode//更新次数
        versionName cfg.versionName//版本号
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v7a'
        }
    }
    signingConfigs{
        releaseConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        debugConfig{
            storeFile file("keyset/my_debug_key.jks")
            keyAlias "my_debug_key"
            keyPassword "123456"
            storePassword "123456"
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            buildConfigField "String", "AlphaUrl", "\"${url["debug"]}\""
            signingConfig signingConfigs.debugConfig
        }
        release {
            minifyEnabled true
            shrinkResources true
            buildConfigField "String", "AlphaUrl", "\"${url["release"]}\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }

    }

}

/**
 * 方法三：优化二
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    librarys.each { k, v -> implementation v }


}

/**
 * 方法二：优化二
 */
//dependencies {
//
//    implementation fileTree(dir: 'libs', includes: ['*.jar'])
//
//    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
//
//    implementation librarys["multidex"]
//    implementation librarys["okhttp3"]
//    implementation librarys["appcompat-v7"]
//    implementation librarys["junit"]
//    implementation librarys["constraint-layout"]
//    implementation librarys["butterknife"]
//    implementation librarys["support-annotations"]
//    implementation librarys["support-v4"]
//
//    //    implementation 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar'
////    implementation 'com.mikepenz:material-design-iconic-typeface:2.2.0.4@aar'
////    implementation 'com.mikepenz:fontawesome-typeface:4.7.0.2@aar'
////    implementation 'com.mikepenz:octicons-typeface:3.2.0.4@aar'
////    implementation 'com.mikepenz:meteocons-typeface:1.1.0.4@aar'
////    implementation 'com.mikepenz:community-material-typeface:2.0.46.1@aar'
////    implementation 'com.mikepenz:weather-icons-typeface:2.0.10.4@aar'
////    implementation 'com.mikepenz:typeicons-typeface:2.0.7.4@aar'
////    implementation 'com.mikepenz:entypo-typeface:1.0.0.4@aar'
////    implementation 'com.mikepenz:devicon-typeface:2.0.0.4@aar'
////    implementation 'com.mikepenz:foundation-icons-typeface:3.0.0.4@aar'
////    implementation 'com.mikepenz:ionicons-typeface:2.0.1.4@aar'
////    implementation 'com.mikepenz:pixeden-7-stroke-typeface:1.2.0.2@aar'
//
//
//}

/**
 * 方法一：未优化
 */
//dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//
//    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
//    implementation 'com.android.support:appcompat-v7:26.0.0-beta1'
//    testImplementation 'junit:junit:4.12'
//    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
//
//    implementation 'com.jakewharton:butterknife:8.8.1'
//    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
//
//    //    兼容一些 Framework API，如 Context.getDrawable() 和View.performAccessibilityAction()，大小为 602k
////    implementation 'com.android.support:support-compat:24.2.1'
////    //    提供一系列核心的工具类，如 AsyncTaskLoader 和 PermissionChecker，大小为 90k
////    implementation 'com.android.support:support-core-utils:24.2.1'
////    //    提供一系列核心的 UI，如 ViewPager、 NestedScrollView，大小为 240k
////    implementation 'com.android.support:support-core-ui:24.2.1'
////    //    android.media 兼容库，包括 MediaBrowser 和 MediaSession，大小为 248k
////    implementation 'com.android.support:support-media-compat:24.2.1'
////    //    跟fragment相关部分，大小为 136k。
////    // V4这个子库依赖了其他4个子库，所以我们一旦依赖这个库就会自动导入其他4个子库，这跟直接依赖整个support-v4效果类似
////    implementation 'com.android.support:support-fragment:24.2.1'
//    //    support-annotations 为一些注解的声明库，如我们比较常用的 RequiresApi、UiThread、NonNull。大小为 21k
//    implementation 'com.android.support:support-annotations:26.0.0-beta1'
//    implementation 'com.android.support:support-v4:26.0.0-beta1'
//
//    //Icon 库    https://github.com/mikepenz/Android-Iconics
//    implementation "com.mikepenz:iconics-core:3.0.0@aar"
////    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
//
//    //this adds all ui view widgets (IconicsButton, IconicsImageView, ...)
//    implementation "com.mikepenz:iconics-views:3.0.0@aar"
//
//    implementation 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar'
//    implementation 'com.mikepenz:material-design-iconic-typeface:2.2.0.4@aar'
//    implementation 'com.mikepenz:fontawesome-typeface:4.7.0.2@aar'
//    implementation 'com.mikepenz:octicons-typeface:3.2.0.4@aar'
//    implementation 'com.mikepenz:meteocons-typeface:1.1.0.4@aar'
//    implementation 'com.mikepenz:community-material-typeface:2.0.46.1@aar'
//    implementation 'com.mikepenz:weather-icons-typeface:2.0.10.4@aar'
//    implementation 'com.mikepenz:typeicons-typeface:2.0.7.4@aar'
//    implementation 'com.mikepenz:entypo-typeface:1.0.0.4@aar'
//    implementation 'com.mikepenz:devicon-typeface:2.0.0.4@aar'
//    implementation 'com.mikepenz:foundation-icons-typeface:3.0.0.4@aar'
//    implementation 'com.mikepenz:ionicons-typeface:2.0.1.4@aar'
//    implementation 'com.mikepenz:pixeden-7-stroke-typeface:1.2.0.2@aar'
//
//
//}
